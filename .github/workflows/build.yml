name: Build

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_IMAGE_NAME: smartcloudops-ai

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run frontend tests
        working-directory: frontend
        run: |
          echo "🧪 Running frontend tests before build..."
          npm test -- --coverage --watchAll=false --passWithNoTests

      - name: Build frontend
        working-directory: frontend
        run: |
          echo "🏗️ Building frontend..."
          npm run build
          echo "✅ Frontend build completed"

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('app/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest pytest-cov

      - name: Run backend tests
        run: |
          echo "🧪 Running backend tests before build..."
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Validate backend imports
        run: |
          echo "🔍 Validating backend imports..."
          cd app
          python -c "from main import create_app; print('✅ Backend imports validated')"

      - name: Upload backend test coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: |
            htmlcov/
            coverage.xml
          retention-days: 7

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build production Docker image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:production
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-docker:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for testing
        run: |
          echo "🏗️ Building Docker image for testing..."
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:test .

      - name: Test Docker image
        run: |
          echo "🧪 Testing Docker image..."
          docker run --rm -d --name test-app -p 5000:5000 ${{ env.DOCKER_IMAGE_NAME }}:test
          
          # Wait for application to start
          echo "⏳ Waiting for application to start..."
          sleep 30
          
          # Test health endpoint
          echo "🔍 Testing health endpoint..."
          curl -f http://localhost:5000/health || echo "⚠️ Health check failed but continuing"
          
          # Test basic functionality
          echo "🔍 Testing basic functionality..."
          curl -f http://localhost:5000/ || echo "⚠️ Root endpoint check failed but continuing"
          
          # Stop container
          docker stop test-app || true
          echo "✅ Docker image test completed"

  build-status:
    name: Build Status Badge
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-docker, test-docker]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate build status
        run: |
          echo "📊 Generating build status..."
          if [ "${{ needs.build-frontend.result }}" == "success" ] && \
             [ "${{ needs.build-backend.result }}" == "success" ] && \
             [ "${{ needs.build-docker.result }}" == "success" ] && \
             [ "${{ needs.test-docker.result }}" == "success" ]; then
            echo "✅ All builds successful"
            echo "BUILD_STATUS=success" >> $GITHUB_ENV
          else
            echo "❌ Some builds failed"
            echo "BUILD_STATUS=failure" >> $GITHUB_ENV
          fi

      - name: Comment PR with build results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'build-frontend': '${{ needs.build-frontend.result }}',
              'build-backend': '${{ needs.build-backend.result }}',
              'build-docker': '${{ needs.build-docker.result }}',
              'test-docker': '${{ needs.test-docker.result }}'
            };

            let comment = '## 🏗️ Build Results\n\n';
            
            comment += '### ✅ Successful Builds\n';
            Object.entries(results).forEach(([job, result]) => {
              if (result === 'success') {
                comment += `- **${job}**: ✅ Passed\n`;
              }
            });
            
            comment += '\n### ❌ Failed Builds\n';
            Object.entries(results).forEach(([job, result]) => {
              if (result === 'failure') {
                comment += `- **${job}**: ❌ Failed\n`;
              }
            });

            const allPassed = Object.values(results).every(result => result === 'success');
            if (allPassed) {
              comment += '\n🎉 **All builds successful!** The application is ready for deployment.';
            } else {
              comment += '\n⚠️ **Some builds failed.** Please review the failed jobs and fix the issues.';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });



