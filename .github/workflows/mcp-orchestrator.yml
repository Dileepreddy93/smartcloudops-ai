name: MCP Orchestrator AI - Workflow Monitor & Auto-Fix
on:
  schedule:
    - cron: '*/30 * * * *'  # Run every 30 minutes
  workflow_run:
    workflows:
      - "CI/CD Pipeline"
      - "Code Quality & Security"
      - "Infrastructure Validation"
      - "Build"
      - "Deploy"
      - "Lint & Test"
    types:
      - completed
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      max_retries:
        description: 'Maximum number of retry attempts'
        required: false
        default: '5'
        type: number

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  mcp-orchestrator:
    name: MCP Orchestrator AI - Monitor & Auto-Fix
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml python-dotenv
      
      - name: Install Node.js dependencies
        working-directory: frontend
        run: npm ci
        continue-on-error: true
      
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      
      - name: Configure GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status
      
      - name: Set environment variables
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV
      
      - name: Run MCP Orchestrator AI
        run: |
          echo "üöÄ Starting MCP Orchestrator AI..."
          echo "Repository: ${{ github.repository }}"
          echo "Max retries: ${{ github.event.inputs.max_retries || '5' }}"
          
          python scripts/mcp_orchestrator.py
      
      - name: Upload MCP Orchestrator reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mcp-orchestrator-reports
          path: |
            mcp_orchestrator_*.json
            mcp_orchestrator.log
      
      - name: Create issue for persistent failures
        if: failure()
        run: |
          # Check if there are failure reports
          if [ -f mcp_orchestrator_failure_report.json ]; then
            echo "Creating issue for persistent workflow failures..."
            
            # Extract failure details
            FAILURE_DETAILS=$(cat mcp_orchestrator_failure_report.json | jq -r '.message')
            FIXES_APPLIED=$(cat mcp_orchestrator_failure_report.json | jq -r '.fixes_applied')
            ISSUES_FOUND=$(cat mcp_orchestrator_failure_report.json | jq -r '.issues_found')
            
            # Create issue body
            ISSUE_BODY="## MCP Orchestrator AI Report\n\n**Status:** ‚ùå FAILURE\n\n**Details:** $FAILURE_DETAILS\n\n**Statistics:**\n- Fixes Applied: $FIXES_APPLIED\n- Issues Found: $ISSUES_FOUND\n\n**Action Required:** Manual intervention needed to resolve persistent workflow failures.\n\n**Report:** See attached artifacts for detailed failure analysis.\n\n---\n*Generated by MCP Orchestrator AI on $(date)*"
            
            # Create issue
            gh issue create \
              --title "üö® MCP Orchestrator: Persistent Workflow Failures" \
              --body "$ISSUE_BODY" \
              --label "workflow-failure" \
              --label "mcp-orchestrator" \
              --label "needs-attention"
          fi
      
      - name: Comment on successful runs
        if: success()
        run: |
          # Check if there are success reports
          if [ -f mcp_orchestrator_success_report.json ]; then
            echo "Creating comment for successful workflow monitoring..."
            
            # Extract success details
            SUCCESS_MESSAGE=$(cat mcp_orchestrator_success_report.json | jq -r '.message')
            FIXES_APPLIED=$(cat mcp_orchestrator_success_report.json | jq -r '.fixes_applied')
            ISSUES_FOUND=$(cat mcp_orchestrator_success_report.json | jq -r '.issues_found')
            
            # Create comment body
            COMMENT_BODY="## üéâ MCP Orchestrator AI Success Report\n\n**Status:** ‚úÖ SUCCESS\n\n**Message:** $SUCCESS_MESSAGE\n\n**Statistics:**\n- Fixes Applied: $FIXES_APPLIED\n- Issues Found: $ISSUES_FOUND\n\n**Details:** All workflows are now passing successfully!\n\n---\n*Generated by MCP Orchestrator AI on $(date)*"
            
            # Create comment on the latest commit
            gh api repos/${{ github.repository }}/commits/$(git rev-parse HEAD)/comments \
              -f body="$COMMENT_BODY"
          fi
      
      - name: Summary
        if: always()
        run: |
          echo "## MCP Orchestrator AI Summary"
          echo "=============================="
          
          if [ -f mcp_orchestrator_success_report.json ]; then
            echo "‚úÖ SUCCESS: All workflows are passing!"
            cat mcp_orchestrator_success_report.json | jq -r '.fixes_applied' | echo "Fixes applied: $(cat)"
            cat mcp_orchestrator_success_report.json | jq -r '.issues_found' | echo "Issues found: $(cat)"
          elif [ -f mcp_orchestrator_failure_report.json ]; then
            echo "‚ùå FAILURE: Some workflows are still failing"
            cat mcp_orchestrator_failure_report.json | jq -r '.fixes_applied' | echo "Fixes applied: $(cat)"
            cat mcp_orchestrator_failure_report.json | jq -r '.issues_found' | echo "Issues found: $(cat)"
          else
            echo "‚ö†Ô∏è  NO REPORT: No monitoring report generated"
          fi
