name: Production CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  security_code_quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort bandit safety tfsec docker

      - name: Auto-fix formatting (isort + black)
        run: |
          isort --profile black app/ scripts/
          black app/ scripts/

      - name: Commit and push formatting changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if [[ -n "$(git status --porcelain)" ]]; then
            git add -A
            git commit -m "ci: auto-format (isort + black) [skip ci]"
            git push
          else
            echo "No formatting changes"
          fi

      - name: Lint code
        run: |
          echo "Linting..."
          # Add your linter command here

      - name: Security scan with Bandit
        run: |
          bandit -r app/ scripts/ -f json -o bandit-report.json || true

      - name: Dependency vulnerability scan
        run: |
          safety check --full-report --json > safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          if-no-files-found: ignore

  docker_build_test:
    runs-on: ubuntu-latest
    needs: security_code_quality

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t myapp:latest .

      - name: Run Docker tests
        run: |
          docker run --rm myapp:latest pytest || true

  deploy_to_staging:
    runs-on: ubuntu-latest
    needs: docker_build_test
    steps:
      - name: Deploy to Staging
        run: echo "Deploying to Staging..."

  deploy_to_production:
    runs-on: ubuntu-latest
    needs: deploy_to_staging
    steps:
      - name: Deploy to Production
        run: echo "Deploying to Production..."
