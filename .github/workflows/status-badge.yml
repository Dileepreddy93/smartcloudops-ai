name: Status Badge

on:
  workflow_run:
    workflows: ["Lint & Test", "Build", "Deploy"]
    types:
      - completed
    branches:
      - main
      - develop

permissions:
  contents: write
  pull-requests: write

jobs:
  update-status-badge:
    name: Update Status Badge
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate status badge
        run: |
          echo "üìä Generating status badge..."
          
          # Get workflow run status
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          WORKFLOW_STATUS="${{ github.event.workflow_run.conclusion }}"
          
          # Create badge URL
          if [ "$WORKFLOW_STATUS" = "success" ]; then
            BADGE_COLOR="brightgreen"
            BADGE_TEXT="passing"
          elif [ "$WORKFLOW_STATUS" = "failure" ]; then
            BADGE_COLOR="red"
            BADGE_TEXT="failing"
          else
            BADGE_COLOR="yellow"
            BADGE_TEXT="unknown"
          fi
          
          # Generate badge URL
          BADGE_URL="https://img.shields.io/badge/$WORKFLOW_NAME-$BADGE_TEXT-$BADGE_COLOR"
          
          echo "Badge URL: $BADGE_URL"
          echo "WORKFLOW_NAME=$WORKFLOW_NAME" >> $GITHUB_ENV
          echo "BADGE_URL=$BADGE_URL" >> $GITHUB_ENV
          echo "WORKFLOW_STATUS=$WORKFLOW_STATUS" >> $GITHUB_ENV

      - name: Update README with status badge
        run: |
          echo "üìù Updating README with status badge..."
          
          # Create badge markdown
          BADGE_MARKDOWN="![$WORKFLOW_NAME]($BADGE_URL)"
          
          # Update README.md if it exists
          if [ -f "README.md" ]; then
            # Check if badge already exists
            if grep -q "$WORKFLOW_NAME" README.md; then
              # Update existing badge
              sed -i "s|!\[$WORKFLOW_NAME\](.*)|$BADGE_MARKDOWN|g" README.md
            else
              # Add new badge at the top
              sed -i "1i $BADGE_MARKDOWN" README.md
            fi
          fi
          
          echo "‚úÖ Status badge updated in README"

      - name: Commit badge update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "üìä Update status badge for $WORKFLOW_NAME workflow" || echo "No changes to commit"
          git push

  notify-workflow-completion:
    name: Notify Workflow Completion
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Comment on PR if workflow completed
        if: github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests.length > 0
        uses: actions/github-script@v7
        with:
          script: |
            const workflowRun = context.payload.workflow_run;
            const workflowName = workflowRun.name;
            const workflowStatus = workflowRun.conclusion;
            const workflowUrl = workflowRun.html_url;
            
            let statusEmoji = '‚ùì';
            let statusText = 'Unknown';
            
            if (workflowStatus === 'success') {
              statusEmoji = '‚úÖ';
              statusText = 'Success';
            } else if (workflowStatus === 'failure') {
              statusEmoji = '‚ùå';
              statusText = 'Failed';
            } else if (workflowStatus === 'cancelled') {
              statusEmoji = 'üö´';
              statusText = 'Cancelled';
            }
            
            const comment = '## ' + statusEmoji + ' Workflow Completed: ' + workflowName + '\n\n' +
              '**Status:** ' + statusText + '\n' +
              '**Workflow Run:** [View Details](' + workflowUrl + ')\n' +
              '**Completed At:** ' + new Date(workflowRun.updated_at).toLocaleString() + '\n\n' +
              '---\n' +
              '*This notification was automatically generated by the Status Badge workflow.*';

            // Find the PR associated with the workflow run
            const pr = workflowRun.pull_requests[0];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });
