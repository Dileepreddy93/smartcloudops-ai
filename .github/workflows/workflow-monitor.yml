name: Workflow Monitor & Auto-Fix

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_run:
    # Trigger when other workflows fail
    workflows: ["CI/CD Pipeline", "Code Quality & Security", "Infrastructure Validation"]
    types: [completed]
    branches: [main, develop]
  workflow_dispatch:
    # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'

jobs:
  monitor-workflows:
    name: Monitor & Auto-Fix Workflows
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pyyaml python-dotenv
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run workflow monitor
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        python scripts/workflow_monitor.py
    
    - name: Run workflow fixer
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python scripts/auto_workflow_fixer.py
    
    - name: Check for workflow issues
      id: check-issues
      run: |
        # Check if any workflow files have issues
        if [ -f workflow_fix_report_*.json ]; then
          echo "issues_found=true" >> $GITHUB_OUTPUT
          echo "Found workflow issues that need fixing"
        else
          echo "issues_found=false" >> $GITHUB_OUTPUT
          echo "No workflow issues found"
        fi
    
    - name: Apply fixes if needed
      if: steps.check-issues.outputs.issues_found == 'true'
      run: |
        echo "Applying workflow fixes..."
        # The auto_workflow_fixer.py script will handle the fixes
        # This step is just for logging
    
    - name: Commit fixes
      if: steps.check-issues.outputs.issues_found == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "ðŸ”§ Auto-fix workflow issues [skip ci]" || echo "No changes to commit"
        git push
    
    - name: Upload monitoring reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: workflow-monitoring-reports
        path: |
          workflow_monitor_report_*.json
          workflow_fix_report_*.json
          workflow_monitor.log
          workflow_fixer.log
        retention-days: 30
    
    - name: Create issue for persistent failures
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Check for recent monitoring reports
          const reports = fs.readdirSync('.').filter(file => 
            file.startsWith('workflow_monitor_report_') || 
            file.startsWith('workflow_fix_report_')
          );
          
          if (reports.length > 0) {
            const latestReport = reports.sort().pop();
            const reportData = JSON.parse(fs.readFileSync(latestReport, 'utf8'));
            
            const issueTitle = `ðŸš¨ Workflow Monitoring: Persistent Issues Detected`;
            const issueBody = `
## Workflow Monitoring Alert

**Timestamp:** ${reportData.timestamp}
**Total Issues:** ${reportData.total_issues || 0}
**Fixed Issues:** ${reportData.fixed_issues || 0}
**Remaining Issues:** ${reportData.remaining_issues || 0}

### Issues by Severity:
${Object.entries(reportData.issues_by_severity || {}).map(([severity, count]) => 
  `- **${severity.toUpperCase()}:** ${count}`
).join('\n')}

### Recommendations:
${(reportData.recommendations || []).map(rec => `- ${rec}`).join('\n')}

### Next Steps:
1. Review the attached monitoring reports
2. Address any critical issues manually
3. Check workflow configurations
4. Update dependencies if needed

---
*This issue was automatically created by the Workflow Monitor & Auto-Fix system.*
            `;
            
            // Check if issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['workflow-monitor']
            });
            
            const hasExistingIssue = existingIssues.data.some(issue => 
              issue.title.includes('Workflow Monitoring: Persistent Issues')
            );
            
            if (!hasExistingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['workflow-monitor', 'automation', 'ci/cd']
              });
            }
          }

  complete-fix-cycle:
    name: Complete Fix Cycle
    runs-on: ubuntu-latest
    needs: monitor-workflows
    if: needs.monitor-workflows.result == 'failure'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install requests pyyaml python-dotenv
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run complete fix cycle
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        python scripts/fix_all_workflow_issues.py
    
    - name: Upload complete fix report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: complete-fix-reports
        path: |
          workflow_fix_complete_report_*.json
          workflow_fix_complete.log
        retention-days: 30

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [monitor-workflows, complete-fix-cycle]
    if: always() && (needs.monitor-workflows.result == 'success' || needs.complete-fix-cycle.result == 'success')
    
    steps:
    - name: Success notification
      run: |
        echo "ðŸŽ‰ Workflow monitoring and fixing completed successfully!"
        echo "All workflow issues have been resolved."
    
    - name: Comment on PR if triggered by workflow_run
      if: github.event.workflow_run
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `
## âœ… Workflow Issues Resolved

The workflow monitoring system has successfully resolved the issues that caused the previous workflow failure.

**Resolution Details:**
- Issues detected and fixed automatically
- All workflows are now passing
- System is healthy and operational

**Next Steps:**
- Monitor for any new issues
- Review the applied fixes
- Continue with normal development workflow

---
*This resolution was automatically applied by the Workflow Monitor & Auto-Fix system.*
          `;
          
          // Find the PR associated with the workflow run
          const workflowRun = context.payload.workflow_run;
          if (workflowRun && workflowRun.pull_requests && workflowRun.pull_requests.length > 0) {
            const pr = workflowRun.pull_requests[0];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });
          }