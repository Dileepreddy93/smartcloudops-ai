# Production-Optimized Dockerfile for SmartCloudOps AI
# Multi-stage build with security hardening and optimization

# =============================================================================
# STAGE 1: Frontend Builder
# =============================================================================
FROM node:18-alpine AS frontend-builder

# Set working directory
WORKDIR /app/frontend

# Install dependencies for building
RUN apk add --no-cache python3 make g++

# Copy package files
COPY frontend/package*.json ./

# Install dependencies with security audit
RUN npm ci --only=production --audit --fund=false && \
    npm audit fix --audit-level=moderate || true

# Copy frontend source
COPY frontend/src ./src
COPY frontend/public ./public
COPY frontend/tailwind.config.js ./

# Build frontend with optimization
RUN npm run build && \
    npm prune --production

# =============================================================================
# STAGE 2: Backend Builder
# =============================================================================
FROM python:3.11-slim AS backend-builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_ROOT_USER_ACTION=ignore

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY app/requirements.txt .

# Install dependencies with security scanning
RUN pip install --no-cache-dir -r requirements.txt && \
    pip install safety && \
    safety check --json --output safety-report.json || true

# Copy backend source code
COPY app/ ./app/

# =============================================================================
# STAGE 3: Production Runtime
# =============================================================================
FROM python:3.11-slim AS production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    FLASK_ENV=production \
    FLASK_APP=app.main_secure:app \
    GUNICORN_MAX_REQUESTS=1000 \
    GUNICORN_MAX_REQUESTS_JITTER=100 \
    GUNICORN_WORKERS=4 \
    GUNICORN_WORKER_CLASS=gevent \
    GUNICORN_WORKER_CONNECTIONS=1000 \
    GUNICORN_TIMEOUT=30 \
    GUNICORN_KEEPALIVE=2 \
    GUNICORN_ACCESS_LOG_FORMAT='%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && update-ca-certificates

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Copy Python dependencies from builder
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin

# Copy backend application
COPY --from=backend-builder /app/app ./app

# Copy frontend build
COPY --from=frontend-builder /app/frontend/build ./app/static

# Copy security report
COPY --from=backend-builder /app/safety-report.json ./safety-report.json

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/data /app/ml_models /app/cache \
    && chown -R appuser:appuser /app \
    && chmod -R 755 /app \
    && chmod 700 /app/logs /app/data /app/ml_models

# Switch to non-root user
USER appuser

# Health check with proper timeout and retries
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Expose port
EXPOSE 5000

# Security: Set resource limits
ENV GUNICORN_MAX_REQUESTS=1000 \
    GUNICORN_MAX_REQUESTS_JITTER=100 \
    GUNICORN_WORKERS=4 \
    GUNICORN_WORKER_CLASS=gevent \
    GUNICORN_WORKER_CONNECTIONS=1000 \
    GUNICORN_TIMEOUT=30 \
    GUNICORN_KEEPALIVE=2

# Run the application with production settings
CMD ["gunicorn", \
     "--bind", "0.0.0.0:5000", \
     "--workers", "4", \
     "--worker-class", "gevent", \
     "--worker-connections", "1000", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--timeout", "30", \
     "--keep-alive", "2", \
     "--log-level", "info", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--preload", \
     "--user", "appuser", \
     "--group", "appuser", \
     "app.main_secure:app"]

# =============================================================================
# STAGE 4: Security Scanning (Optional)
# =============================================================================
FROM production AS security-scan

# Install Trivy for vulnerability scanning
RUN apt-get update && apt-get install -y wget apt-transport-https gnupg lsb-release \
    && wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add - \
    && echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee -a /etc/apt/sources.list.d/trivy.list \
    && apt-get update \
    && apt-get install -y trivy \
    && rm -rf /var/lib/apt/lists/*

# Run security scan
RUN trivy fs --exit-code 1 --severity HIGH,CRITICAL /app || true
